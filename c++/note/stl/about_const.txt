const

	所有情况
	1	const int a = 16；
	2	int b=16;
		const int a = b；
	3	const int * a;
		const * int a;
		int *const a;
	不想写了到时候再说



	类的设计者通过把成员函数声明为 const
以表明它们不修改类对象
			例如class Screen {
						public:
						char get() const { return _screen[_cursor]; }
				// ...
		}

	















	const的存在尤其必须性
	出现const的情况：
		bool operator==( const IntArray& ) const;
			
		IntArray& operator=( const IntArray& );
		int size() const { return _size; }
	
	
	const int a;
	const int *cptr;
			我们可以重新赋值 cptr
		使其指向不同的对象
		但不能修改 cptr 指向的对象
	
	指向 const 的指针常被用作函数的形式参数
		int strcmp( const char *str1, const char *str2 );
		
	int errNumb = 0;
	int *const curErr = &errNumb;
		curErr 是指向一个非 const 对象的 const 指针
		我们可以从右拄左把定义读作
		curErr
		是一个指向 int 类型对象的 const 指针
		这意味着不能赋给 curErr 其他的地址值
		但可以
		修改 curErr 指向的值
		
		
		区分
		int const *
		int * const
		*
		
		const int * 
	
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		